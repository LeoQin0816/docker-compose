version: "3"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongodb:
    driver: ${VOLUMES_DRIVER}
  couchdb:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  nexus3:
    driver: ${VOLUMES_DRIVER}
  nexus-data: {}

services:
  ### PHP-FPM Container #####################################

  php-fpm:
    build:
      context: ./php-fpm
      args:
        - PHP_VERSION=${PHP_VERSION}
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/var/www
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    networks:
      - frontend

  ### tomcat Server ########################################

  nexus3:
    build:
      context: ./nexus3
      args: 
        - TZ=${TZ}
    environment:
      - INSTALL4J_ADD_VM_PARAMS=${NEXUS3_ARFUMENTS}
    volumes:
      - ${DATA_SAVE_PATH}/nexus3:/nexus-data
      - ${NEXUS3_HOST_LOG_PATH}:/nexus-data/log
    ports:
      - "${NEXUS3_HOST_PORT}:8081"
    networks:
      - frontend

  ### tomcat Server ########################################

  tomcat:
    build:
      context: ./tomcat
      args: 
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/usr/local/tomcat
      - ${TOMCAT_HOST_LOG_PATH}:/usr/local/tomcat/logs
      - ${TOMCAT_CONF_PATH}:/usr/local/tomcat/conf
    ports:
      - "${TOMCAT_HOST_PORT}:8080"
    networks:
      - frontend

  ### NGINX Server Container ################################

  nginx:
    build:
      context: ./nginx
      args: 
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/var/www
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    networks:
      - frontend

  ### NGINX Server Container Depends PHP ####################

  nginx_depends_php:
    build:
      context: ./nginx_depends_php
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/var/www
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend

  ### Apache Server ########################################

  apache2:
    build:
      context: ./apache2
      args: 
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/var/www
      - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
      - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
    ports:
      - "${APACHE_HOST_HTTP_PORT}:80"
      - "${APACHE_HOST_HTTPS_PORT}:443"
    networks:
      - frontend

  ### Apache Server Depends PHP ############################

  apache2_depends_php:
    build:
      context: ./apache2_depends_php
      args:
        - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
        - PHP_UPSTREAM_TIMEOUT=${APACHE_PHP_UPSTREAM_TIMEOUT}
        - TZ=${TZ}
    volumes:
      - ${APPLICATION}:/var/www
      - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
      - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
    ports:
      - "${APACHE_HOST_HTTP_PORT}:80"
      - "${APACHE_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend

  ### MySQL Container #########################################

  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
        - TZ=${TZ}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - frontend

  ### MariaDB Container #######################################

  mariadb:
    build:
      context: ./mariadb
      args:
        - MARIADB_VERSION=${MARIADB_VERSION}
        - TZ=${TZ}
    environment:
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    volumes:
      - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MARIADB_PORT}:3306"
    networks:
      - frontend

  ### PostgreSQL Container ####################################

  postgres:
    build: 
      context: ./postgres
      args: 
        - TZ=${TZ}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - frontend

  ### MongoDB Container #######################################

  mongodb:
    build: 
      context: ./mongodb
      args: 
        - TZ=${TZ}
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_SAVE_PATH}/mongodb:/data/db
    networks:
      - frontend

  ### couchdb Container #######################################

  couchdb:
    build:
      context: ./couchdb
      args: 
        - TZ=${TZ}
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=admin
    volumes:
      - ${DATA_SAVE_PATH}/couchdb:/opt/couchdb/data
      - ./logs/couchdb:/usr/local/var/log/couchdb
    ports:
      - "${COUCHDB_PORT}:5984"
    networks:
      - frontend

  ### Redis Container #########################################

  redis:
    build: 
      context: ./redis
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_SAVE_PATH}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - frontend

  ### Memcached Container #####################################

  memcached:
    build: 
      context: ./memcached
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    networks:
      - frontend

  ### RabbitMQ #############################################

  rabbitmq:
    build: 
      context: ./rabbitmq
      args: 
        - TZ=${TZ}
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - frontend

  ### ElasticSearch ########################################

  elasticsearch:
    build: 
      context: ./elasticsearch
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_SAVE_PATH}/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
